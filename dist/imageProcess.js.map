{"version":3,"sources":["../imageProcess.js"],"names":["PaintPattern","baseCanvas","pts","clear","ctx","beginPath","moveTo","canvas","width","interval","height","length","i","lineTo","stroke","ReshapedColorData","imageData","array","index","row","push","col","data","ImageProcess","rcd","smoothDepth","depth","total","color","value","normalize","smooth","system","blackThreshold","continuousMinPercentage","barlineHalfWidth","measureMinLength","rowBegin","y","rowEnd","isBarline","measures","splice","maxLength","current","isBlack","dx","x","measureStart","Measure","dataSeq","depthThreshold","intervalThreshold","cbs","beginAt","System","min_start","max_start","_min","_max","cpy","ds","d1","d2","d3","d4","d5"],"mappings":";;;;;;AAAA;;;IAGMA,Y;;;;;;;wCACwBC,U,EAAYC,G,EAAK;AAC7CD,cAAWE,KAAX;AACAF,cAAWG,GAAX,CAAeC,SAAf;AACAJ,cAAWG,GAAX,CAAeE,MAAf,CAAsBL,WAAWG,GAAX,CAAe,CAAf,IAAkBH,WAAWM,MAAX,CAAkBC,KAA1D,EAAgE,CAAhE;AACA,OAAIC,WAAWR,WAAWM,MAAX,CAAkBG,MAAlB,GAAyBR,IAAIS,MAA5C;AACA,QAAK,IAAIC,IAAE,CAAX,EAAaA,IAAEV,IAAIS,MAAnB,EAA0B,EAAEC,CAA5B,EAA+B;AAC9BX,eAAWG,GAAX,CAAeS,MAAf,CAAsBX,IAAIU,CAAJ,IAAOX,WAAWM,MAAX,CAAkBC,KAA/C,EAAqDI,IAAEH,QAAvD;AACA;AACDR,cAAWG,GAAX,CAAeU,MAAf;AACA;;;;;;AAGF;;;;;IAGMC,iB,GACL,2BAAYC,SAAZ,EAAuB;AAAA;;AACtB,KAAIC,QAAQ,EAAZ;AAAA,KAAgBC,QAAQ,CAAxB;AACA,MAAK,IAAIC,MAAI,CAAb,EAAeA,MAAIH,UAAUN,MAA7B,EAAoC,EAAES,GAAtC,EAA2C;AAC1CF,QAAMG,IAAN,CAAW,EAAX;AACA,OAAK,IAAIC,MAAI,CAAb,EAAeA,MAAIL,UAAUR,KAA7B,EAAmC,EAAEa,GAArC,EAA0C;AACzCJ,SAAME,GAAN,EAAWC,IAAX,CAAgB,CACfJ,UAAUM,IAAV,CAAeJ,KAAf,CADe,EAEfF,UAAUM,IAAV,CAAeJ,QAAM,CAArB,CAFe,EAGfF,UAAUM,IAAV,CAAeJ,QAAM,CAArB,CAHe,EAIfF,UAAUM,IAAV,CAAeJ,QAAM,CAArB,CAJe,CAAhB;AAMAA,YAAS,CAAT;AACA;AACD;AACD,MAAKI,IAAL,GAAYL,KAAZ;AACA,MAAKT,KAAL,GAAaQ,UAAUR,KAAvB;AACA,MAAKE,MAAL,GAAcM,UAAUN,MAAxB;AACA,C;;IAGIa,Y;;;;;;;;;AAEL;;;;;;mCAMwBC,G,EAAsB;AAAA,OAAjBC,WAAiB,uEAAH,CAAG;;AAC7C,OAAIC,QAAQ,EAAZ;AACA,QAAK,IAAIP,MAAI,CAAb,EAAeA,MAAIK,IAAId,MAAvB,EAA8B,EAAES,GAAhC,EAAqC;AACpC,QAAIQ,QAAQ,CAAZ;AACA,SAAK,IAAIN,MAAI,CAAb,EAAeA,MAAIG,IAAIhB,KAAvB,EAA6B,EAAEa,GAA/B,EAAoC;AACnC,SAAIO,QAAQJ,IAAIF,IAAJ,CAASH,GAAT,EAAcE,GAAd,EAAmB,CAAnB,IAAwBG,IAAIF,IAAJ,CAASH,GAAT,EAAcE,GAAd,EAAmB,CAAnB,CAAxB,GAAgDG,IAAIF,IAAJ,CAASH,GAAT,EAAcE,GAAd,EAAmB,CAAnB,CAA5D;AACAO,aAAQA,QAAMJ,IAAIF,IAAJ,CAASH,GAAT,EAAcE,GAAd,EAAmB,CAAnB,CAAN,GAA4B,CAA5B,GAA8B,GAA9B,GAAkC,GAA1C;AACA,SAAIG,IAAIF,IAAJ,CAASH,GAAT,EAAcE,GAAd,EAAmB,CAAnB,IAAwB,EAA5B,EAAgCO,QAAQ,CAAR;AAChCD,cAASC,KAAT;AACA;AACD,QAAIC,QAAQF,QAAMX,UAAUR,KAA5B;AACAkB,UAAMN,IAAN,CAAWS,KAAX;AACA;AACDH,WAAQH,aAAaO,SAAb,CAAuBP,aAAaQ,MAAb,CAAoBR,aAAaO,SAAb,CAAuBJ,KAAvB,CAApB,EAAkDD,WAAlD,CAAvB,CAAR;AACA,UAAOC,KAAP;AACA;;AAED;;;;;;;;;;;;;2CAUgCF,G,EAAKQ,M,EAAyG;AAAA,OAAjGC,cAAiG,uEAAhF,GAAgF;AAAA,OAA3EC,uBAA2E,uEAAjD,GAAiD;AAAA,OAA5CC,gBAA4C,uEAAzB,CAAyB;AAAA,OAAtBC,gBAAsB,uEAAH,CAAG;;AAC7I,OAAIC,WAAWL,OAAOM,CAAtB;AAAA,OAAyBC,SAASP,OAAOM,CAAP,GAASN,OAAOtB,MAAlD;AAAA,OAA0D8B,YAAY,EAAtE;AACAR,UAAOS,QAAP,CAAgBC,MAAhB,CAAuB,CAAvB,EAA0BV,OAAOS,QAAP,CAAgB9B,MAA1C;AACA,QAAK,IAAIU,MAAI,CAAb,EAAeA,MAAIG,IAAIhB,KAAvB,EAA6B,EAAEa,GAA/B,EAAoC;AACnC,QAAIsB,YAAY,CAAhB;AAAA,QAAmBC,UAAU,CAA7B;AACA,SAAK,IAAIN,IAAID,QAAb,EAAuBC,IAAIC,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACvC,SAAIO,UAAU,KAAd;AACA,UAAK,IAAIC,KAAK,CAACX,gBAAf,EAAiCW,MAAMX,gBAAvC,EAAyD,EAAEW,EAA3D,EAA+D;AAC9D,UAAIC,IAAI1B,MAAMyB,EAAd;AACA,UAAIC,IAAI,CAAJ,IAASA,KAAKvB,IAAIhB,KAAtB,EAA6B;AAC7B,UAAIoB,QAAQJ,IAAIF,IAAJ,CAASgB,CAAT,EAAYS,CAAZ,EAAe,CAAf,IAAoBvB,IAAIF,IAAJ,CAASgB,CAAT,EAAYS,CAAZ,EAAe,CAAf,CAApB,GAAwCvB,IAAIF,IAAJ,CAASgB,CAAT,EAAYS,CAAZ,EAAe,CAAf,CAApD;AACAnB,cAAQA,QAAMJ,IAAIF,IAAJ,CAASgB,CAAT,EAAYS,CAAZ,EAAe,CAAf,CAAN,GAAwB,CAAxB,GAA0B,GAA1B,GAA8B,GAAtC;AACA,UAAIvB,IAAIF,IAAJ,CAASgB,CAAT,EAAYS,CAAZ,EAAe,CAAf,IAAoB,EAAxB,EAA4BnB,QAAQ,CAAR;AAC5B,UAAIA,QAAQK,cAAZ,EAA4B;AAC3BY,iBAAU,IAAV;AACA;AACA;AACD;AACD,SAAIA,OAAJ,EAAa;AACZD,iBAAW,CAAX;AACA,UAAIA,UAAUD,SAAd,EAAyBA,aAAaC,OAAb;AACzB,MAHD,MAGO;AACNA,gBAAU,CAAV;AACA;AACD;AACDJ,cAAUpB,IAAV,CAAeuB,YAAYX,OAAOtB,MAAP,GAAcwB,uBAAzC;AACA;AACD,OAAIc,eAAe,CAAC,CAApB;AACA,QAAK,IAAIpC,IAAE,CAAX,EAAaA,IAAEY,IAAIhB,KAAnB,EAAyB,EAAEI,CAA3B,EAA8B;AAC7B,QAAIoC,gBAAgB,CAAC,CAArB,EAAwB;AACvB,SAAIR,UAAU5B,IAAE,CAAZ,KAAkB,CAAC4B,UAAU5B,CAAV,CAAvB,EAAqCoC,eAAepC,CAAf;AACrC,KAFD,MAEO;AACN,SAAI4B,UAAU5B,CAAV,CAAJ,EAAkB;AACjB,UAAIA,IAAIoC,YAAJ,GAAmBZ,gBAAvB,EAAyCJ,OAAOS,QAAP,CAAgBrB,IAAhB,CAAqB,IAAI6B,OAAJ,CAAYD,YAAZ,EAA0BpC,IAAE,CAA5B,CAArB;AACzCoC,qBAAe,CAAC,CAAhB;AACA;AACD;AACD;AACD,UAAOhB,OAAOS,QAAd;AACA;;AAED;;;;;;;;;;sCAO2BS,O,EAAmD;AAAA,OAA1CC,cAA0C,uEAA3B,IAA2B;AAAA,OAArBC,iBAAqB,uEAAH,CAAG;;AAC7E,OAAIC,MAAM,EAAV;AACA,OAAIC,UAAU,CAAC,CAAf;AACA,QAAK,IAAI1C,IAAE,CAAX,EAAaA,IAAEsC,QAAQvC,MAAvB,EAA8B,EAAEC,CAAhC,EAAmC;AAClC,QAAIsC,QAAQtC,CAAR,IAAauC,cAAjB,EAAiC;AAChC,SAAIG,WAAW,CAAC,CAAhB,EAAmBA,UAAU1C,CAAV;AACnB,KAFD,MAEO;AACN,SAAI0C,WAAW,CAAX,IAAiB1C,IAAE0C,OAAH,GAAcF,iBAAlC,EAAqDC,IAAIjC,IAAJ,CAAS,IAAImC,MAAJ,CAAWD,OAAX,EAAoB1C,IAAE0C,OAAtB,CAAT;AACrDA,eAAU,CAAC,CAAX;AACA;AACD;AACD,UAAOD,GAAP;AACA;;AAED;;;;;;;;;;4BAOiBH,O,EAAuC;AAAA,OAA9BM,SAA8B,uEAAlB,CAAkB;AAAA,OAAfC,SAAe,uEAAH,CAAG;;AACvD,OAAIC,OAAOF,SAAX;AAAA,OAAsBG,OAAOF,SAA7B;AACA,QAAK,IAAI7C,IAAE,CAAX,EAAaA,IAAEsC,QAAQvC,MAAvB,EAA8B,EAAEC,CAAhC,EAAmC;AAClC,QAAIsC,QAAQtC,CAAR,IAAW8C,IAAf,EAAqBA,OAAOR,QAAQtC,CAAR,CAAP;AACrB,QAAIsC,QAAQtC,CAAR,IAAW+C,IAAf,EAAqBA,OAAOT,QAAQtC,CAAR,CAAP;AACrB;AACD,OAAIgD,MAAM,EAAV;AACA,QAAK,IAAIhD,KAAE,CAAX,EAAaA,KAAEsC,QAAQvC,MAAvB,EAA8B,EAAEC,EAAhC;AAAmCgD,QAAIxC,IAAJ,CAAS,CAAC8B,QAAQtC,EAAR,IAAW8C,IAAZ,KAAmBC,OAAKD,IAAxB,CAAT;AAAnC,IACA,OAAOE,GAAP;AACA;;AAED;;;;;;;;;yBAMcV,O,EAAkB;AAAA,OAATxB,KAAS,uEAAH,CAAG;;AAC/B,OAAIkC,MAAM,EAAV;AAAA,OAAcC,KAAKX,OAAnB;AACA,UAAOxB,QAAQ,CAAf,EAAkB;AACjB,SAAK,IAAId,IAAE,CAAX,EAAaA,IAAEiD,GAAGlD,MAAlB,EAAyB,EAAEC,CAA3B,EAA8B;AAC7B,SAAIkD,KAAMlD,IAAE,CAAH,IAAO,CAAP,GAASiD,GAAGjD,IAAE,CAAL,CAAT,GAAiB,CAA1B;AACA,SAAImD,KAAMnD,IAAE,CAAH,IAAO,CAAP,GAASiD,GAAGjD,IAAE,CAAL,CAAT,GAAiB,CAA1B;AACA,SAAIoD,KAAKH,GAAGjD,CAAH,CAAT;AACA,SAAIqD,KAAMrD,IAAE,CAAH,GAAMiD,GAAGlD,MAAT,GAAgBkD,GAAGjD,IAAE,CAAL,CAAhB,GAAwB,CAAjC;AACA,SAAIsD,KAAMtD,IAAE,CAAH,GAAMiD,GAAGlD,MAAT,GAAgBkD,GAAGjD,IAAE,CAAL,CAAhB,GAAwB,CAAjC;AACA,SAAIiB,QAAQiC,KAAG,GAAH,GAAOC,KAAG,GAAV,GAAcC,KAAG,GAAjB,GAAqBC,KAAG,GAAxB,GAA4BC,KAAG,GAA3C;AACAN,SAAIxC,IAAJ,CAASS,KAAT;AACA;AACDgC,SAAKD,GAAL;AACAA,UAAM,EAAN;AACAlC,aAAS,CAAT;AACA;AACD,UAAOmC,EAAP;AACA","file":"imageProcess.js","sourcesContent":["/**\n * Created by somefive on 17-7-3.\n */\nclass PaintPattern {\n\tstatic drawLinesHorizontally(baseCanvas, pts) {\n\t\tbaseCanvas.clear();\n\t\tbaseCanvas.ctx.beginPath();\n\t\tbaseCanvas.ctx.moveTo(baseCanvas.ctx[0]*baseCanvas.canvas.width,0);\n\t\tlet interval = baseCanvas.canvas.height/pts.length;\n\t\tfor (let i=1;i<pts.length;++i) {\n\t\t\tbaseCanvas.ctx.lineTo(pts[i]*baseCanvas.canvas.width,i*interval);\n\t\t}\n\t\tbaseCanvas.ctx.stroke();\n\t}\n}\n\n/**\n * A class for reconstructed color data.\n */\nclass ReshapedColorData {\n\tconstructor(imageData) {\n\t\tlet array = [], index = 0;\n\t\tfor (let row=0;row<imageData.height;++row) {\n\t\t\tarray.push([]);\n\t\t\tfor (let col=0;col<imageData.width;++col) {\n\t\t\t\tarray[row].push([\n\t\t\t\t\timageData.data[index],\n\t\t\t\t\timageData.data[index+1],\n\t\t\t\t\timageData.data[index+2],\n\t\t\t\t\timageData.data[index+3]\n\t\t\t\t]);\n\t\t\t\tindex += 4;\n\t\t\t}\n\t\t}\n\t\tthis.data = array;\n\t\tthis.width = imageData.width;\n\t\tthis.height = imageData.height;\n\t}\n}\n\nclass ImageProcess {\n\t\n\t/**\n\t * Get the smoothed color depth of average image row\n\t * @param rcd Reshaped Color Data\n\t * @param smoothDepth\n\t * @returns {Array}\n\t */\n\tstatic getRowColorDepth(rcd, smoothDepth = 3) {\n\t\tlet depth = [];\n\t\tfor (let row=0;row<rcd.height;++row) {\n\t\t\tlet total = 0;\n\t\t\tfor (let col=0;col<rcd.width;++col) {\n\t\t\t\tlet color = rcd.data[row][col][0] + rcd.data[row][col][1] + rcd.data[row][col][2];\n\t\t\t\tcolor = color*rcd.data[row][col][3]/4/256/256;\n\t\t\t\tif (rcd.data[row][col][3] < 25) color = 1;\n\t\t\t\ttotal += color;\n\t\t\t}\n\t\t\tlet value = total/imageData.width;\n\t\t\tdepth.push(value);\n\t\t}\n\t\tdepth = ImageProcess.normalize(ImageProcess.smooth(ImageProcess.normalize(depth),smoothDepth));\n\t\treturn depth;\n\t}\n\t\n\t/**\n\t * Get the barline separated measures of a system\n\t * @param rcd Reshaped Color Data where system comes from\n\t * @param system\n\t * @param blackThreshold the depth of color below which will be recognized as black\n\t * @param continuousMinPercentage the threshold of percentage of continuous black pixels to be recognized as a barline\n\t * @param barlineHalfWidth the half width of a speculated barline\n\t * @param measureMinLength the minimal length of continuous columns to be identified as a measure\n\t * @returns {Array}\n\t */\n\tstatic getColumnContinuousLines(rcd, system, blackThreshold = 0.4, continuousMinPercentage = 0.7, barlineHalfWidth = 1, measureMinLength = 5) {\n\t\tlet rowBegin = system.y, rowEnd = system.y+system.height, isBarline = [];\n\t\tsystem.measures.splice(0, system.measures.length);\n\t\tfor (let col=0;col<rcd.width;++col) {\n\t\t\tlet maxLength = 0, current = 0;\n\t\t\tfor (let y = rowBegin; y < rowEnd; ++y) {\n\t\t\t\tlet isBlack = false;\n\t\t\t\tfor (let dx = -barlineHalfWidth; dx <= barlineHalfWidth; ++dx) {\n\t\t\t\t\tlet x = col + dx;\n\t\t\t\t\tif (x < 0 || x >= rcd.width) continue;\n\t\t\t\t\tlet color = rcd.data[y][x][0] + rcd.data[y][x][1] + rcd.data[y][x][2];\n\t\t\t\t\tcolor = color*rcd.data[y][x][3]/4/256/256;\n\t\t\t\t\tif (rcd.data[y][x][3] < 25) color = 1;\n\t\t\t\t\tif (color < blackThreshold) {\n\t\t\t\t\t\tisBlack = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isBlack) {\n\t\t\t\t\tcurrent += 1;\n\t\t\t\t\tif (current > maxLength) maxLength += current;\n\t\t\t\t} else {\n\t\t\t\t\tcurrent = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tisBarline.push(maxLength > system.height*continuousMinPercentage);\n\t\t}\n\t\tlet measureStart = -1;\n\t\tfor (let i=1;i<rcd.width;++i) {\n\t\t\tif (measureStart == -1) {\n\t\t\t\tif (isBarline[i-1] && !isBarline[i]) measureStart = i;\n\t\t\t} else {\n\t\t\t\tif (isBarline[i]) {\n\t\t\t\t\tif (i - measureStart > measureMinLength) system.measures.push(new Measure(measureStart, i-1));\n\t\t\t\t\tmeasureStart = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn system.measures;\n\t}\n\t\n\t/**\n\t * Calculate continuous blocks position. list of [beginAt, length]\n\t * @param dataSeq\n\t * @param depthThreshold\n\t * @param intervalThreshold\n\t * @returns {Array}\n\t */\n\tstatic getContinuousBlocks(dataSeq, depthThreshold=0.98, intervalThreshold=5) {\n\t\tlet cbs = [];\n\t\tlet beginAt = -1;\n\t\tfor (let i=0;i<dataSeq.length;++i) {\n\t\t\tif (dataSeq[i] < depthThreshold) {\n\t\t\t\tif (beginAt == -1) beginAt = i;\n\t\t\t} else {\n\t\t\t\tif (beginAt >= 0 && (i-beginAt) > intervalThreshold) cbs.push(new System(beginAt, i-beginAt));\n\t\t\t\tbeginAt = -1;\n\t\t\t}\n\t\t}\n\t\treturn cbs;\n\t}\n\t\n\t/**\n\t * Normalize a sequence of data by shifting and stretching\n\t * @param dataSeq\n\t * @param min_start\n\t * @param max_start\n\t * @returns {Array}\n\t */\n\tstatic normalize(dataSeq, min_start = 1, max_start = 0) {\n\t\tlet _min = min_start, _max = max_start;\n\t\tfor (let i=0;i<dataSeq.length;++i) {\n\t\t\tif (dataSeq[i]<_min) _min = dataSeq[i];\n\t\t\tif (dataSeq[i]>_max) _max = dataSeq[i];\n\t\t}\n\t\tlet cpy = [];\n\t\tfor (let i=0;i<dataSeq.length;++i) cpy.push((dataSeq[i]-_min)/(_max-_min));\n\t\treturn cpy;\n\t}\n\t\n\t/**\n\t * Smooth a sequence of data\n\t * @param dataSeq\n\t * @param depth\n\t * @returns {Array}\n\t */\n\tstatic smooth(dataSeq, depth=1) {\n\t\tlet cpy = [], ds = dataSeq;\n\t\twhile (depth > 0) {\n\t\t\tfor (let i=0;i<ds.length;++i) {\n\t\t\t\tlet d1 = (i-2)>=0?ds[i-2]:1;\n\t\t\t\tlet d2 = (i-1)>=0?ds[i-1]:1;\n\t\t\t\tlet d3 = ds[i];\n\t\t\t\tlet d4 = (i+1)<ds.length?ds[i+1]:1;\n\t\t\t\tlet d5 = (i+2)<ds.length?ds[i+2]:1;\n\t\t\t\tlet value = d1*0.1+d2*0.2+d3*0.4+d4*0.2+d5*0.1;\n\t\t\t\tcpy.push(value);\n\t\t\t}\n\t\t\tds = cpy;\n\t\t\tcpy = [];\n\t\t\tdepth -= 1;\n\t\t}\n\t\treturn ds;\n\t}\n}"]}